{
  "address": "0x9cB431D1561a1c5886B4c0dC4d0C9765cEa54207",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gohm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ohmEthFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethUsdFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "fetchPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2157b7518fdb4bbe56c20db7af6105a9da6475e9d7bb415c6bd09297ba50398b",
  "receipt": {
    "to": null,
    "from": "0x403898Ddff450b89e2D96BDDcf763541655FDE8B",
    "contractAddress": "0x9cB431D1561a1c5886B4c0dC4d0C9765cEa54207",
    "transactionIndex": 31,
    "gasUsed": "361083",
    "logsBloom": "0x
    "blockHash": "0x0155d04b8908b19b15f368e08c40c986024a4c2f8faec7618c1f572bbe3c0c74",
    "transactionHash": "0x2157b7518fdb4bbe56c20db7af6105a9da6475e9d7bb415c6bd09297ba50398b",
    "logs": [],
    "blockNumber": 10385648,
    "cumulativeGasUsed": "9059356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB4Aaf6857411248A79B95bcb1C13E86140fE9C29",
    "0xB720172705020e8091F9cCa13Ef5E7d3fB9EC4Ee",
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "c71c38bb9b435a616663ed98f0058d11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gohm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ohmEthFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethUsdFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fetchPrice()\":{\"returns\":{\"_0\":\"the price with 18 decimals\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fetchPrice()\":{\"notice\":\"fetches the latest price\"}},\"notice\":\"price oracle for gOHM-USD on the ethereum mainnet\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/MainnetgOHMOracle.sol\":\"MainnetgOHMOracle\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\",\"keccak256\":\"0x6d04595d5f68f36186be58f14a5a20c6cafaf49ca329136af1e9f467a62bebe5\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function fetchPrice() external view returns (bool, uint);\\n}\",\"keccak256\":\"0xf3bc4b871ebb74641f91462364551170df871926ad43013db480e3857095c1a1\",\"license\":\"MIT\"},\"contracts/libraries/SafeAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AggregatorV3Interface } from \\\"../interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary SafeAggregatorV3 {\\n    uint private constant TARGET_DECIMALS = 18;\\n    /**\\n     * @notice returns  the latest price from a chainlink feed\\n     * @return boolean if call was successful\\n     * @return the price with 18 decimals\\n     */\\n    function safeLatestRoundData(AggregatorV3Interface self) internal view returns (bool, uint) {\\n        uint8 decimals;\\n\\n        try self.decimals() returns (uint8 decimals_) {\\n            decimals = decimals_;\\n        } catch {\\n            return (false, 0);\\n        }\\n\\n        try self.latestRoundData() returns\\n        (\\n            uint80 /* currentRoundId */,\\n            int256 currentPrice,\\n            uint256 /* startedAt */,\\n            uint256 /* timestamp */,\\n            uint80 /* answeredInRound */\\n        ) {\\n            uint price = uint(currentPrice);\\n            if (decimals < TARGET_DECIMALS) {\\n                price = price * (10**(TARGET_DECIMALS - decimals));\\n            } else if (decimals > TARGET_DECIMALS) {\\n                price = price / (10**(decimals - TARGET_DECIMALS));\\n            }\\n            return (true, price);\\n        } catch {\\n            return (false, 0);\\n        }\\n    }\\n}\",\"keccak256\":\"0x5d156630c6f242ba7e572854e3b89fde73337b130a689a79ebc226400dbac499\",\"license\":\"MIT\"},\"contracts/oracles/MainnetgOHMOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { AggregatorV3Interface } from \\\"../interfaces/AggregatorV3Interface.sol\\\";\\nimport { SafeAggregatorV3 } from \\\"../libraries/SafeAggregatorV3.sol\\\";\\n\\ninterface IgOHM {\\n    /**\\n        @notice converts OHM amount to gOHM\\n        @param _amount amount of gOHM\\n        @return amount of OHM\\n     */\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n    function index() external view returns (uint);\\n}\\n\\n/**\\n * @notice price oracle for gOHM-USD on the ethereum mainnet\\n */\\ncontract MainnetgOHMOracle is IOracle {\\n    using SafeAggregatorV3 for AggregatorV3Interface;\\n\\n    uint256 private constant GOHM_PRECISION = 1e9;\\n    IgOHM private immutable gOHM;\\n    AggregatorV3Interface private immutable ohmEthFeed;\\n    AggregatorV3Interface private immutable ethUsdFeed;\\n\\n    constructor(\\n        address _gohm,\\n        address _ohmEthFeed,\\n        address _ethUsdFeed\\n    ) {\\n        require(_gohm != address(0), \\\"Oracle: 0x0 gOHM address\\\");\\n        require(_ohmEthFeed != address(0), \\\"Oracle: 0x0 OHM-ETH address\\\");\\n        require(_ethUsdFeed != address(0), \\\"Oracle: 0x0 ETH-USD address\\\");\\n\\n        gOHM = IgOHM(_gohm);\\n        ohmEthFeed = AggregatorV3Interface(_ohmEthFeed);\\n        ethUsdFeed = AggregatorV3Interface(_ethUsdFeed);\\n    }\\n\\n    /**\\n     * @notice fetches the latest price\\n     * @return the price with 18 decimals\\n     */\\n    function fetchPrice() external view override returns (bool, uint) {\\n        (bool ethUsdSuccess, uint ethUsdPrice) = ethUsdFeed.safeLatestRoundData();\\n        (bool ohmEthSuccess, uint ohmEthPrice) = ohmEthFeed.safeLatestRoundData();\\n\\n        if (!ethUsdSuccess || !ohmEthSuccess) {\\n            return (false, 0);\\n        }\\n\\n         return (true, ((ohmEthPrice * ethUsdPrice / 1e18) * gOHM.index() / GOHM_PRECISION));\\n    }\\n}\",\"keccak256\":\"0x5edf36c4e8166e27b68462dda36260217565f4075b454a7c9dbcd60aa5bb3dad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161075f38038061075f83398101604081905261002f91610179565b6001600160a01b03831661008a5760405162461bcd60e51b815260206004820152601860248201527f4f7261636c653a2030783020674f484d2061646472657373000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166100e05760405162461bcd60e51b815260206004820152601b60248201527f4f7261636c653a20307830204f484d2d455448206164647265737300000000006044820152606401610081565b6001600160a01b0381166101365760405162461bcd60e51b815260206004820152601b60248201527f4f7261636c653a20307830204554482d555344206164647265737300000000006044820152606401610081565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526101bc565b80516001600160a01b038116811461017457600080fd5b919050565b60008060006060848603121561018e57600080fd5b6101978461015d565b92506101a56020850161015d565b91506101b36040850161015d565b90509250925092565b60805160601c60a05160601c60c05160601c61056e6101f16000396000605e0152600060970152600060ef015261056e6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630fdb11cf14610030575b600080fd5b610038610053565b60408051921515835260208301919091520160405180910390f35b60008060008061008b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166101bb565b915091506000806100c47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166101bb565b915091508315806100d3575081155b156100e657506000958695509350505050565b6001633b9aca007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561014657600080fd5b505afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e919061034a565b670de0b6b3a764000061019187866104ec565b61019b91906103dd565b6101a591906104ec565b6101af91906103dd565b95509550505050509091565b6000806000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f957600080fd5b505afa925050508015610229575060408051601f3d908101601f19168201909252610226918101906103b3565b60015b6102395750600093849350915050565b9050836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561027457600080fd5b505afa9250505080156102a4575060408051601f3d908101601f191682019092526102a191810190610363565b60015b6102b45750600093849350915050565b83601260ff881610156102eb576102cf60ff8816601261050b565b6102da90600a610442565b6102e490826104ec565b905061031d565b60128760ff16111561031d57610305601260ff891661050b565b61031090600a610442565b61031a90826103dd565b90505b60019a909950975050505050505050565b80516001600160501b038116811461034557600080fd5b919050565b60006020828403121561035c57600080fd5b5051919050565b600080600080600060a0868803121561037b57600080fd5b6103848661032e565b94506020860151935060408601519250606086015191506103a76080870161032e565b90509295509295909350565b6000602082840312156103c557600080fd5b815160ff811681146103d657600080fd5b9392505050565b6000826103fa57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561043a57816000190482111561042057610420610522565b8085161561042d57918102915b93841c9390800290610404565b509250929050565b60006103d68383600082610458575060016104e6565b81610465575060006104e6565b816001811461047b5760028114610485576104a1565b60019150506104e6565b60ff84111561049657610496610522565b50506001821b6104e6565b5060208310610133831016604e8410600b84101617156104c4575081810a6104e6565b6104ce83836103ff565b80600019048211156104e2576104e2610522565b0290505b92915050565b600081600019048311821515161561050657610506610522565b500290565b60008282101561051d5761051d610522565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f8dd88edaf3f62d7cd011ef2073aa797393b114a249b008932fa73fbf221181164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630fdb11cf14610030575b600080fd5b610038610053565b60408051921515835260208301919091520160405180910390f35b60008060008061008b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166101bb565b915091506000806100c47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166101bb565b915091508315806100d3575081155b156100e657506000958695509350505050565b6001633b9aca007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561014657600080fd5b505afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e919061034a565b670de0b6b3a764000061019187866104ec565b61019b91906103dd565b6101a591906104ec565b6101af91906103dd565b95509550505050509091565b6000806000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f957600080fd5b505afa925050508015610229575060408051601f3d908101601f19168201909252610226918101906103b3565b60015b6102395750600093849350915050565b9050836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561027457600080fd5b505afa9250505080156102a4575060408051601f3d908101601f191682019092526102a191810190610363565b60015b6102b45750600093849350915050565b83601260ff881610156102eb576102cf60ff8816601261050b565b6102da90600a610442565b6102e490826104ec565b905061031d565b60128760ff16111561031d57610305601260ff891661050b565b61031090600a610442565b61031a90826103dd565b90505b60019a909950975050505050505050565b80516001600160501b038116811461034557600080fd5b919050565b60006020828403121561035c57600080fd5b5051919050565b600080600080600060a0868803121561037b57600080fd5b6103848661032e565b94506020860151935060408601519250606086015191506103a76080870161032e565b90509295509295909350565b6000602082840312156103c557600080fd5b815160ff811681146103d657600080fd5b9392505050565b6000826103fa57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561043a57816000190482111561042057610420610522565b8085161561042d57918102915b93841c9390800290610404565b509250929050565b60006103d68383600082610458575060016104e6565b81610465575060006104e6565b816001811461047b5760028114610485576104a1565b60019150506104e6565b60ff84111561049657610496610522565b50506001821b6104e6565b5060208310610133831016604e8410600b84101617156104c4575081810a6104e6565b6104ce83836103ff565b80600019048211156104e2576104e2610522565b0290505b92915050565b600081600019048311821515161561050657610506610522565b500290565b60008282101561051d5761051d610522565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f8dd88edaf3f62d7cd011ef2073aa797393b114a249b008932fa73fbf221181164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fetchPrice()": {
        "returns": {
          "_0": "the price with 18 decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fetchPrice()": {
        "notice": "fetches the latest price"
      }
    },
    "notice": "price oracle for gOHM-USD on the ethereum mainnet",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}