{
  "address": "0x4d68E1899eE4874F42e08DA0Ed8e796C213B74be",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_debtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserveToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_buyFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sellFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "BuyFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtTokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "FeesHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReservesBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReservesSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReservesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SellFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellFeesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_buyFee",
          "type": "uint256"
        }
      ],
      "name": "setBuyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellFee",
          "type": "uint256"
        }
      ],
      "name": "setSellFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawDebtTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a4296f0c244d22f0894d8ef05a086b9277cb55eb7750dd301ac18d449651deb",
  "receipt": {
    "to": null,
    "from": "0x403898Ddff450b89e2D96BDDcf763541655FDE8B",
    "contractAddress": "0x4d68E1899eE4874F42e08DA0Ed8e796C213B74be",
    "transactionIndex": 0,
    "gasUsed": "1157942",
    "logsBloom": "0x
    "blockHash": "0x2f52d6a5ad6c8780089089b2ae0dd578ea86bc37bd66fb690b22424e9f9d9681",
    "transactionHash": "0x3a4296f0c244d22f0894d8ef05a086b9277cb55eb7750dd301ac18d449651deb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10491666,
        "transactionHash": "0x3a4296f0c244d22f0894d8ef05a086b9277cb55eb7750dd301ac18d449651deb",
        "address": "0x4d68E1899eE4874F42e08DA0Ed8e796C213B74be",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000403898ddff450b89e2d96bddcf763541655fde8b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2f52d6a5ad6c8780089089b2ae0dd578ea86bc37bd66fb690b22424e9f9d9681"
      }
    ],
    "blockNumber": 10491666,
    "cumulativeGasUsed": "1157942",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A4B6468170fF16EDF956172964C474B8349134E",
    "0x5592EC0cfb4dbc12D3aB100b257153436a1f0FEa",
    "600",
    "600",
    "0x403898Ddff450b89e2D96BDDcf763541655FDE8B"
  ],
  "numDeployments": 1,
  "solcInputHash": "77cd55a4f4109bc94cff95c2ae08a719",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BuyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtTokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"FeesHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SellFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDebtTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(uint256)\":{\"params\":{\"_amount\":\"the amount of reserve token to buy\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"_amount\":\"the amount to transfer\",\"_token\":\"the address of the token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sell(uint256)\":{\"params\":{\"_amount\":\"the amount of reserve token to sell\"}},\"setBuyFee(uint256)\":{\"params\":{\"_buyFee\":\"the new buy fee\"}},\"setSellFee(uint256)\":{\"params\":{\"_sellFee\":\"the new sell fee\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawDebtTokens(uint256)\":{\"params\":{\"_amount\":\"the amount of debt tokens to withdraw\"}},\"withdrawReserves(uint256)\":{\"params\":{\"_amount\":\"the amount of reserves to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buy(uint256)\":{\"notice\":\"buys _amount of reserveToken for debtToken. Will transfer _amount + buy fees of reserveToken from msg.sender requires approval\"},\"harvestFees()\":{\"notice\":\"Harvests fees collected to the treasury\"},\"recoverERC20(address,uint256)\":{\"notice\":\"recover tokens inadvertantly sent to this contract by transfering them to the owner\"},\"sell(uint256)\":{\"notice\":\"sells _amount of reserveToken in exchange for debtToken. Will transfer _amount + sell fees of debtToken from msg.sender requires approval\"},\"setBuyFee(uint256)\":{\"notice\":\"update the buy fee\"},\"setSellFee(uint256)\":{\"notice\":\"updates the sell fee\"},\"withdrawDebtTokens(uint256)\":{\"notice\":\"withdraw a portion of the debt tokens to the owner\"},\"withdrawReserves(uint256)\":{\"notice\":\"withdraw a portion of the reserves to the owner\"}},\"notice\":\"A Peg Stability Module (PSM) that allows swapping debtToken 1:1 for another stablecoin assesses a buy and sell fee on swaps. While fees are collected in both the reserve and debt tokens, they are only harvested in debt tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PegStability.sol\":\"PegStability\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PegStability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//\\n//        ___           ___           ___           ___\\n//       /\\\\  \\\\         /\\\\  \\\\         /\\\\__\\\\         /\\\\  \\\\\\n//      /::\\\\  \\\\       /::\\\\  \\\\       /:/ _/_       /::\\\\  \\\\\\n//     /:/\\\\:\\\\  \\\\     /:/\\\\:\\\\__\\\\     /:/ /\\\\  \\\\     /:/\\\\:\\\\  \\\\\\n//    /:/ /::\\\\  \\\\   /:/ /:/  /    /:/ /::\\\\  \\\\   /:/  \\\\:\\\\  \\\\\\n//   /:/_/:/\\\\:\\\\__\\\\ /:/_/:/__/___ /:/__\\\\/\\\\:\\\\__\\\\ /:/__/ \\\\:\\\\__\\\\\\n//   \\\\:\\\\/:/  \\\\/__/ \\\\:\\\\/:::::/  / \\\\:\\\\  \\\\ /:/  / \\\\:\\\\  \\\\ /:/  /\\n//    \\\\::/__/       \\\\::/~~/~~~~   \\\\:\\\\  /:/  /   \\\\:\\\\  /:/  /\\n//     \\\\:\\\\  \\\\        \\\\:\\\\~~\\\\        \\\\:\\\\/:/  /     \\\\:\\\\/:/  /\\n//      \\\\:\\\\__\\\\        \\\\:\\\\__\\\\        \\\\::/  /       \\\\::/  /\\n//       \\\\/__/         \\\\/__/         \\\\/__/         \\\\/__/\\n//\\n\\nimport { IPSM } from \\\"./interfaces/IPSM.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @notice A Peg Stability Module (PSM) that allows swapping debtToken 1:1 for another\\n * stablecoin assesses a buy and sell fee on swaps. While fees are collected in both the\\n * reserve and debt tokens, they are only harvested in debt tokens.\\n */\\ncontract PegStability is Ownable, IPSM {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    event FeesHarvested(uint fees);\\n    event ReservesBought(uint amount);\\n    event ReservesSold(uint amount);\\n    event ReservesWithdrawn(uint amount);\\n    event DebtTokensWithdrawn(uint amount);\\n    event BuyFeeUpdated(uint fee);\\n    event SellFeeUpdated(uint fee);\\n\\n    IERC20Metadata public immutable debtToken;\\n    IERC20Metadata public immutable reserveToken;\\n    uint256 public override buyFee;\\n    uint256 public override sellFee;\\n    uint256 public constant override FEE_PRECISION = 1e5;\\n\\n    uint256 public buyFeesCollected; // in reserve tokens\\n    uint256 public sellFeesCollected; // in debt tokens\\n    address public treasury;\\n\\n    constructor(\\n        address _debtToken,\\n        address _reserveToken,\\n        uint256 _buyFee,\\n        uint256 _sellFee,\\n        address _treasury\\n    ) {\\n        require(_debtToken != address(0), \\\"0x0 debt token\\\");\\n        require(_reserveToken != address(0), \\\"0x0 reserve token\\\");\\n        require(_treasury != address(0), \\\"0x0 treasury\\\");\\n        require(IERC20Metadata(_debtToken).decimals() == IERC20Metadata(_reserveToken).decimals(), \\\"decimal mismatch\\\");\\n\\n        debtToken = IERC20Metadata(_debtToken);\\n        reserveToken = IERC20Metadata(_reserveToken);\\n\\n        buyFee = _buyFee;\\n        sellFee = _sellFee;\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice buys _amount of reserveToken for debtToken.\\n     * Will transfer _amount + buy fees of reserveToken from msg.sender\\n     * requires approval\\n     * @param _amount the amount of reserve token to buy\\n     */\\n    function buy(uint256 _amount) external override {\\n        // ensure we can still withdraw fees\\n        require(_amount + sellFeesCollected <= debtToken.balanceOf(address(this)), \\\"insufficient balance\\\");\\n\\n        uint256 fees = (_amount * buyFee) / FEE_PRECISION;\\n        buyFeesCollected += fees;\\n\\n        emit ReservesBought(_amount);\\n\\n        reserveToken.safeTransferFrom(msg.sender, address(this), _amount + fees);\\n        debtToken.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice sells _amount of reserveToken in exchange for debtToken.\\n     * Will transfer _amount + sell fees of debtToken from msg.sender\\n     * requires approval\\n     * @param _amount the amount of reserve token to sell\\n     */\\n    function sell(uint256 _amount) external override {\\n        require(_amount + buyFeesCollected <= reserveToken.balanceOf(address(this)), \\\"insufficient balance\\\");\\n\\n        uint256 fees = (_amount * sellFee) / FEE_PRECISION;\\n        sellFeesCollected += fees;\\n\\n        emit ReservesSold(_amount);\\n\\n        debtToken.safeTransferFrom(msg.sender, address(this), _amount + fees);\\n        reserveToken.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice withdraw a portion of the reserves to the owner\\n     * @param _amount the amount of reserves to withdraw\\n     */\\n    function withdrawReserves(uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zero withdraw\\\");\\n\\n        emit ReservesWithdrawn(_amount);\\n        reserveToken.safeTransfer(this.owner(), _amount);\\n    }\\n\\n    /**\\n     * @notice withdraw a portion of the debt tokens to the owner\\n     * @param _amount the amount of debt tokens to withdraw\\n     */\\n    function withdrawDebtTokens(uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zero withdraw\\\");\\n\\n        emit DebtTokensWithdrawn(_amount);\\n        debtToken.safeTransfer(this.owner(), _amount);\\n    }\\n\\n    /**\\n     * @notice update the buy fee\\n     * @param _buyFee the new buy fee\\n     */\\n    function setBuyFee(uint256 _buyFee) external onlyOwner {\\n        require(_buyFee < FEE_PRECISION, \\\"fee too high\\\");\\n        buyFee = _buyFee;\\n        emit BuyFeeUpdated(_buyFee);\\n    }\\n\\n    /**\\n     * @notice updates the sell fee\\n     * @param _sellFee the new sell fee\\n     */\\n    function setSellFee(uint256 _sellFee) external onlyOwner {\\n        require(_sellFee < FEE_PRECISION, \\\"fee too high\\\");\\n        sellFee = _sellFee;\\n        emit SellFeeUpdated(_sellFee);\\n    }\\n\\n    /**\\n     * @notice Harvests fees collected to the treasury\\n     */\\n    function harvestFees() external {\\n        uint debtTokenHarvest = sellFeesCollected;\\n        uint reserveTokenHarvest = buyFeesCollected;\\n        sellFeesCollected = 0;\\n        buyFeesCollected = 0;\\n        emit FeesHarvested(debtTokenHarvest + reserveTokenHarvest);\\n\\n        debtToken.safeTransfer(treasury, debtTokenHarvest);\\n        reserveToken.safeTransfer(treasury, reserveTokenHarvest);\\n    }\\n\\n    /**\\n     * @notice recover tokens inadvertantly sent to this contract by transfering them to the owner\\n     * @param _token the address of the token\\n     * @param _amount the amount to transfer\\n     */\\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\\n        require(_token != address(debtToken), \\\"Cannot recover debt tokens\\\");\\n        require(_token != address(reserveToken), \\\"Cannot recover reserve tokens\\\");\\n\\n        IERC20Metadata(_token).safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe73c522a944f339029a0cb2c3c9f5c8ef6ff75e8d0092da1ca0ec683182f4240\",\"license\":\"MIT\"},\"contracts/interfaces/IPSM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPSM {\\n    function buyFee() external returns (uint256);\\n\\n    function sellFee() external returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function FEE_PRECISION() external returns (uint256);\\n\\n    function buy(uint256 _amount) external;\\n\\n    function sell(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x8e202f136cf468190bbefe42d9041eb5536e730bcfd4d0e30d4827b3406a15bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200160738038062001607833981016040819052620000349162000307565b6200003f336200029a565b6001600160a01b0385166200008c5760405162461bcd60e51b815260206004820152600e60248201526d183c18103232b13a103a37b5b2b760911b60448201526064015b60405180910390fd5b6001600160a01b038416620000d85760405162461bcd60e51b8152602060048201526011602482015270183c18103932b9b2b93b32903a37b5b2b760791b604482015260640162000083565b6001600160a01b0381166200011f5760405162461bcd60e51b815260206004820152600c60248201526b30783020747265617375727960a01b604482015260640162000083565b836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200015957600080fd5b505afa1580156200016e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000194919062000365565b60ff16856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620001d157600080fd5b505afa158015620001e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020c919062000365565b60ff1614620002515760405162461bcd60e51b815260206004820152601060248201526f0c8cac6d2dac2d840dad2e6dac2e8c6d60831b604482015260640162000083565b606094851b6001600160601b03199081166080529390941b90921660a052600155600255600580546001600160a01b0319166001600160a01b0390921691909117905562000391565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200030257600080fd5b919050565b600080600080600060a086880312156200032057600080fd5b6200032b86620002ea565b94506200033b60208701620002ea565b935060408601519250606086015191506200035960808701620002ea565b90509295509295909350565b6000602082840312156200037857600080fd5b815160ff811681146200038a57600080fd5b9392505050565b60805160601c60a05160601c6111f6620004116000396000818161020e01528181610386015281816105c8015281816107f101528181610962015281816109d50152610b3d0152600081816102350152818161034c015281816104b3015281816105490152818161082f015281816109970152610b0801526111f66000f3fe608060405234801561001057600080fd5b50600436106100f15760003560e01c80630cc835a3146100f6578063138cc18f1461010b5780632b14ca5614610113578063470624021461012f5780634f0a4a6a1461013857806361d027b31461014b578063715018a61461016b5780638980f11f146101735780638b4cee08146101865780638da5cb5b1461019957806398aa8c33146101a1578063999777aa146101b4578063c3a5dbb9146101bd578063d96a094a146101c6578063e4849b32146101d9578063e63a391f146101ec578063f2fde38b146101f6578063f4325d6714610209578063f8d8989814610230575b600080fd5b610109610104366004610fcb565b610257565b005b6101096102ed565b61011c60025481565b6040519081526020015b60405180910390f35b61011c60015481565b610109610146366004610fcb565b6103b3565b60055461015e906001600160a01b031681565b6040516101269190611019565b6101096104dd565b610109610181366004610f7d565b610518565b610109610194366004610fcb565b61065c565b61015e6106e2565b6101096101af366004610fcb565b6106f1565b61011c60045481565b61011c60035481565b6101096101d4366004610fcb565b610818565b6101096101e7366004610fcb565b6109be565b61011c620186a081565b610109610204366004610f43565b610b64565b61015e7f000000000000000000000000000000000000000000000000000000000000000081565b61015e7f000000000000000000000000000000000000000000000000000000000000000081565b336102606106e2565b6001600160a01b03161461028f5760405162461bcd60e51b815260040161028690611060565b60405180910390fd5b620186a081106102b15760405162461bcd60e51b8152600401610286906110c3565b60018190556040518181527f7c1445c98b278c9970d007fca6048704bcb25af7cc4a04eb56565d9a9f149ca3906020015b60405180910390a150565b6004805460038054600093849055929055907ffe8981e94194cbbb8c05bbe9e35d5efd344dea70889a90ca458fd7da74672ec961032a8284611110565b60405190815260200160405180910390a1600554610375906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684610c01565b6005546103af906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683610c01565b5050565b336103bc6106e2565b6001600160a01b0316146103e25760405162461bcd60e51b815260040161028690611060565b600081116104025760405162461bcd60e51b8152600401610286906110e9565b6040518181527fc3febe2f56f4f3e1780c613057720fc4ce15936341f577b4a29c5f6e5ecf4ded9060200160405180910390a16104da306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047157600080fd5b505afa158015610485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a99190610f60565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083610c01565b50565b336104e66106e2565b6001600160a01b03161461050c5760405162461bcd60e51b815260040161028690611060565b6105166000610c69565b565b336105216106e2565b6001600160a01b0316146105475760405162461bcd60e51b815260040161028690611060565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156105c65760405162461bcd60e51b815260206004820152601a60248201527943616e6e6f74207265636f766572206465627420746f6b656e7360301b6044820152606401610286565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156106485760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74207265636f766572207265736572766520746f6b656e730000006044820152606401610286565b6103af6001600160a01b0383163383610c01565b336106656106e2565b6001600160a01b03161461068b5760405162461bcd60e51b815260040161028690611060565b620186a081106106ad5760405162461bcd60e51b8152600401610286906110c3565b60028190556040518181527f495ee53ee22006979ebc689a00ed737d7c13b6419142f82dcaea4ed95ac1e780906020016102e2565b6000546001600160a01b031690565b336106fa6106e2565b6001600160a01b0316146107205760405162461bcd60e51b815260040161028690611060565b600081116107405760405162461bcd60e51b8152600401610286906110e9565b6040518181527fda224d10765aaf936e641dc5badd9b8419f4e853576ffb4e4d6b4c5876d5834d9060200160405180910390a16104da306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107af57600080fd5b505afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e79190610f60565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083610c01565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610864903090600401611019565b60206040518083038186803b15801561087c57600080fd5b505afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b49190610fe4565b6004546108c19083611110565b11156108df5760405162461bcd60e51b815260040161028690611095565b6000620186a0600154836108f3919061114a565b6108fd9190611128565b905080600360008282546109119190611110565b90915550506040518281527f8c84dea70d6c5924c2d0a8cabe7bc622d147053ebc3e4ea7cfae0e2cb2ede73f9060200160405180910390a161098a33306109588486611110565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610cb9565b6103af6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384610c01565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610a0a903090600401611019565b60206040518083038186803b158015610a2257600080fd5b505afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190610fe4565b600354610a679083611110565b1115610a855760405162461bcd60e51b815260040161028690611095565b6000620186a060025483610a99919061114a565b610aa39190611128565b90508060046000828254610ab79190611110565b90915550506040518281527f0b55ce9a826ffb08c41622efbfef98c72e863264fb183534dd8cda9c962bd0899060200160405180910390a1610b303330610afe8486611110565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190610cb9565b6103af6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384610c01565b33610b6d6106e2565b6001600160a01b031614610b935760405162461bcd60e51b815260040161028690611060565b6001600160a01b038116610bf85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610286565b6104da81610c69565b6040516001600160a01b038316602482015260448101829052610c6490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610cf7565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610cf19085906323b872dd60e01b90608401610c2d565b50505050565b6000610d4c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610dc99092919063ffffffff16565b805190915015610c645780806020019051810190610d6a9190610fa9565b610c645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610286565b6060610dd88484600085610de2565b90505b9392505050565b606082471015610e435760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610286565b843b610e915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610286565b600080866001600160a01b03168587604051610ead9190610ffd565b60006040518083038185875af1925050503d8060008114610eea576040519150601f19603f3d011682016040523d82523d6000602084013e610eef565b606091505b5091509150610eff828286610f0a565b979650505050505050565b60608315610f19575081610ddb565b825115610f295782518084602001fd5b8160405162461bcd60e51b8152600401610286919061102d565b600060208284031215610f5557600080fd5b8135610ddb816111ab565b600060208284031215610f7257600080fd5b8151610ddb816111ab565b60008060408385031215610f9057600080fd5b8235610f9b816111ab565b946020939093013593505050565b600060208284031215610fbb57600080fd5b81518015158114610ddb57600080fd5b600060208284031215610fdd57600080fd5b5035919050565b600060208284031215610ff657600080fd5b5051919050565b6000825161100f818460208701611169565b9190910192915050565b6001600160a01b0391909116815260200190565b602081526000825180602084015261104c816040850160208701611169565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260149082015273696e73756666696369656e742062616c616e636560601b604082015260600190565b6020808252600c908201526b0cccaca40e8dede40d0d2ced60a31b604082015260600190565b6020808252600d908201526c7a65726f20776974686472617760981b604082015260600190565b6000821982111561112357611123611195565b500190565b60008261114557634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561116457611164611195565b500290565b60005b8381101561118457818101518382015260200161116c565b83811115610cf15750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146104da57600080fdfea26469706673582212201adb40b4af4dca5fb6cfccdd6d5fe6891a35dc7dccfa7732faca0e8fcc6d627b64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(uint256)": {
        "params": {
          "_amount": "the amount of reserve token to buy"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "_amount": "the amount to transfer",
          "_token": "the address of the token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sell(uint256)": {
        "params": {
          "_amount": "the amount of reserve token to sell"
        }
      },
      "setBuyFee(uint256)": {
        "params": {
          "_buyFee": "the new buy fee"
        }
      },
      "setSellFee(uint256)": {
        "params": {
          "_sellFee": "the new sell fee"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawDebtTokens(uint256)": {
        "params": {
          "_amount": "the amount of debt tokens to withdraw"
        }
      },
      "withdrawReserves(uint256)": {
        "params": {
          "_amount": "the amount of reserves to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buy(uint256)": {
        "notice": "buys _amount of reserveToken for debtToken. Will transfer _amount + buy fees of reserveToken from msg.sender requires approval"
      },
      "harvestFees()": {
        "notice": "Harvests fees collected to the treasury"
      },
      "recoverERC20(address,uint256)": {
        "notice": "recover tokens inadvertantly sent to this contract by transfering them to the owner"
      },
      "sell(uint256)": {
        "notice": "sells _amount of reserveToken in exchange for debtToken. Will transfer _amount + sell fees of debtToken from msg.sender requires approval"
      },
      "setBuyFee(uint256)": {
        "notice": "update the buy fee"
      },
      "setSellFee(uint256)": {
        "notice": "updates the sell fee"
      },
      "withdrawDebtTokens(uint256)": {
        "notice": "withdraw a portion of the debt tokens to the owner"
      },
      "withdrawReserves(uint256)": {
        "notice": "withdraw a portion of the reserves to the owner"
      }
    },
    "notice": "A Peg Stability Module (PSM) that allows swapping debtToken 1:1 for another stablecoin assesses a buy and sell fee on swaps. While fees are collected in both the reserve and debt tokens, they are only harvested in debt tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PegStability.sol:PegStability",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4060,
        "contract": "contracts/PegStability.sol:PegStability",
        "label": "buyFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4063,
        "contract": "contracts/PegStability.sol:PegStability",
        "label": "sellFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4069,
        "contract": "contracts/PegStability.sol:PegStability",
        "label": "buyFeesCollected",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4071,
        "contract": "contracts/PegStability.sol:PegStability",
        "label": "sellFeesCollected",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4073,
        "contract": "contracts/PegStability.sol:PegStability",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}