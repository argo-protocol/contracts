{
  "address": "0x68bb830874D36ea13d14daB9dD774E7c350D9c94",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxLoanToValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPenalty",
          "type": "uint256"
        }
      ],
      "name": "createZeroInterestMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "contract IMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numMarkets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd372e20c9e917ee30acecd54b561fbb1347401415fda455444bf362d8d127eb",
  "receipt": {
    "to": null,
    "from": "0x403898Ddff450b89e2D96BDDcf763541655FDE8B",
    "contractAddress": "0x68bb830874D36ea13d14daB9dD774E7c350D9c94",
    "transactionIndex": 7,
    "gasUsed": "2046651",
    "logsBloom": "0x
    "blockHash": "0xd0da32ce0685fe56bfbc8653278f77fe34f6446ecb8f2d3fad39afeaf81f6e3a",
    "transactionHash": "0xdd372e20c9e917ee30acecd54b561fbb1347401415fda455444bf362d8d127eb",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 9985649,
        "transactionHash": "0xdd372e20c9e917ee30acecd54b561fbb1347401415fda455444bf362d8d127eb",
        "address": "0x68bb830874D36ea13d14daB9dD774E7c350D9c94",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000403898ddff450b89e2d96bddcf763541655fde8b"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xd0da32ce0685fe56bfbc8653278f77fe34f6446ecb8f2d3fad39afeaf81f6e3a"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9985649,
        "transactionHash": "0xdd372e20c9e917ee30acecd54b561fbb1347401415fda455444bf362d8d127eb",
        "address": "0x9B61eBFccFF32935913c83bD31Ba172D0b4cC7C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000068bb830874d36ea13d14dab9dd774e7c350d9c94"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xd0da32ce0685fe56bfbc8653278f77fe34f6446ecb8f2d3fad39afeaf81f6e3a"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9985649,
        "transactionHash": "0xdd372e20c9e917ee30acecd54b561fbb1347401415fda455444bf362d8d127eb",
        "address": "0x68bb830874D36ea13d14daB9dD774E7c350D9c94",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000403898ddff450b89e2d96bddcf763541655fde8b",
          "0x000000000000000000000000fe07a76856a6ffd96ddf466dededab1d76355a6b"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xd0da32ce0685fe56bfbc8653278f77fe34f6446ecb8f2d3fad39afeaf81f6e3a"
      }
    ],
    "blockNumber": 9985649,
    "cumulativeGasUsed": "2591635",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfE07A76856A6FFD96ddF466DEdedab1d76355A6b"
  ],
  "numDeployments": 1,
  "solcInputHash": "e4635647cd969a8d9c0c827048963a98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoanToValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPenalty\",\"type\":\"uint256\"}],\"name\":\"createZeroInterestMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CreateMarket(uint256)\":{\"params\":{\"index\":\"Index of the current market in `markets` list.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_owner\":\"Owner of the factory and all markets\"}},\"createZeroInterestMarket(address,address,address,address,uint256,uint256,uint256)\":{\"params\":{\"_borrowRate\":\"Rate to calculate flat borrow fee\",\"_collateralToken\":\"ERC-20 to be deposited as collateral\",\"_debtToken\":\"ERC-20 to be withdrawn as debt\",\"_liquidationPenalty\":\"Rate to calculate liquidation penalty\",\"_maxLoanToValue\":\"Maximum ratio of debt to collateral\",\"_oracle\":\"Oracle from which to fetch updated collateral/debt token price\",\"_treasury\":\"the account that receives fees\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CreateMarket(uint256)\":{\"notice\":\"New market created\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create new MarketFactory with an owner\"},\"createZeroInterestMarket(address,address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Create new ZeroInterestMarket owned by this contract's owner\"}},\"notice\":\"Factory for Markets*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MarketFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IMarket } from \\\"./interfaces/IMarket.sol\\\";\\nimport { ZeroInterestMarket } from \\\"./ZeroInterestMarket.sol\\\";\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * Factory for Markets\\n **/\\ncontract MarketFactory is Ownable {\\n    /**\\n     * @notice New market created\\n     * @param index Index of the current market in `markets` list.\\n     */\\n    event CreateMarket(uint256 index);\\n\\n    IMarket[] public markets;\\n    ZeroInterestMarket private zeroInterestMarketImpl;\\n\\n    /**\\n     * @notice Create new MarketFactory with an owner\\n     * @param _owner Owner of the factory and all markets\\n     */\\n    constructor(address _owner) {\\n        zeroInterestMarketImpl = new ZeroInterestMarket();\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Create new ZeroInterestMarket owned by this contract's owner\\n     * @param _treasury the account that receives fees\\n     * @param _collateralToken ERC-20 to be deposited as collateral\\n     * @param _debtToken ERC-20 to be withdrawn as debt\\n     * @param _oracle Oracle from which to fetch updated collateral/debt token price\\n     * @param _maxLoanToValue Maximum ratio of debt to collateral\\n     * @param _borrowRate Rate to calculate flat borrow fee\\n     * @param _liquidationPenalty Rate to calculate liquidation penalty\\n     */\\n    function createZeroInterestMarket(\\n        address _treasury,\\n        address _collateralToken,\\n        address _debtToken,\\n        address _oracle,\\n        uint256 _maxLoanToValue,\\n        uint256 _borrowRate,\\n        uint256 _liquidationPenalty\\n    ) public onlyOwner {\\n        ZeroInterestMarket market = ZeroInterestMarket(Clones.clone(address(zeroInterestMarketImpl)));\\n        market.initialize(\\n            owner(),\\n            _treasury,\\n            _collateralToken,\\n            _debtToken,\\n            _oracle,\\n            _maxLoanToValue,\\n            _borrowRate,\\n            _liquidationPenalty\\n        );\\n        markets.push(market);\\n\\n        emit CreateMarket(markets.length - 1);\\n    }\\n\\n    function numMarkets() public view returns (uint256) {\\n        return markets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x290efdef136ab6dec4c000eeb727153df7248ebcc79119a27846c20ecf7f2a38\",\"license\":\"MIT\"},\"contracts/ZeroInterestMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IOracle } from \\\"./interfaces/IOracle.sol\\\";\\nimport { IMarket } from \\\"./interfaces/IMarket.sol\\\";\\nimport { IDebtToken } from \\\"./interfaces/IDebtToken.sol\\\";\\nimport { IFlashSwap } from \\\"./interfaces/IFlashSwap.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * A lending market that only supports a flat borrow fee and no interest rate\\n */\\ncontract ZeroInterestMarket is Ownable, Initializable, IMarket {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IDebtToken;\\n\\n    // Events\\n    event Deposit(address indexed from, address indexed to, uint256 amount);\\n    event Withdraw(address indexed from, address indexed to, uint256 amount);\\n    event Borrow(address indexed from, address indexed to, uint256 amount);\\n    event Repay(address indexed from, address indexed to, uint256 amount);\\n    event Liquidate(address indexed from, address indexed to, uint256 repayDebt, uint256 liquidatedCollateral, uint256 liquidationPrice);\\n    event TreasuryUpdated(address newTreasury);\\n    event OracleUpdated(address oracle);\\n    event LastPriceUpdated(uint price);\\n    event FeesHarvested(uint fees);\\n\\n    uint constant internal MAX_INT = 2**256 - 1;\\n\\n    address public treasury;\\n    IERC20 public collateralToken;\\n    IDebtToken public debtToken;\\n\\n    IOracle public oracle;\\n    uint public lastPrice;\\n    uint constant public LAST_PRICE_PRECISION = 1e18;\\n\\n    uint public feesCollected;\\n\\n    uint public maxLoanToValue;\\n    uint constant public LOAN_TO_VALUE_PRECISION = 1e5;\\n    uint public borrowRate;\\n    uint constant public BORROW_RATE_PRECISION = 1e5;\\n    uint public liquidationPenalty;\\n    uint constant public LIQUIDATION_PENALTY_PRECISION = 1e5;\\n\\n    mapping(address => uint) public userCollateral;\\n    mapping(address => uint) public userDebt;\\n    uint public totalCollateral;\\n    uint public totalDebt;\\n \\n    function initialize(\\n        address _owner,\\n        address _treasury,\\n        address _collateralToken,\\n        address _debtToken,\\n        address _oracle,\\n        uint256 _maxLoanToValue,\\n        uint256 _borrowRate,\\n        uint256 _liquidationPenalty\\n    ) public initializer {\\n        require(_owner != address(0), \\\"0x owner address\\\");\\n        require(_treasury != address(0), \\\"0x treasury address\\\");\\n        require(_collateralToken != address(0), \\\"0x collateralToken address\\\");\\n        require(_debtToken != address(0), \\\"0x debtToken address\\\");\\n        require(_oracle != address(0), \\\"0x oracle address\\\");\\n\\n        treasury = _treasury;\\n        collateralToken = IERC20(_collateralToken);\\n        debtToken = IDebtToken(_debtToken);\\n        oracle = IOracle(_oracle);\\n        maxLoanToValue = _maxLoanToValue;\\n        borrowRate = _borrowRate;\\n        liquidationPenalty = _liquidationPenalty;\\n        Ownable._transferOwnership(_owner);\\n\\n        emit TreasuryUpdated(_treasury);\\n        emit OracleUpdated(_oracle);\\n    }\\n\\n    /**\\n     * @notice Deposits `_amount` of collateral to the `_to` account.\\n     * @param _to the account that receives the collateral\\n     * @param _amount the amount of collateral tokens\\n     */\\n    function deposit(address _to, uint _amount) public override {\\n        userCollateral[_to] = userCollateral[_to] + _amount;\\n        totalCollateral = totalCollateral + _amount;\\n\\n        collateralToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n         emit Deposit(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws `_amount` of collateral tokens from msg.sender and sends them to the `_to` address.\\n     * @param _to the account that receives the collateral\\n     * @param _amount the amount of collateral tokens\\n     */\\n    function withdraw(address _to, uint _amount) public override {\\n        require(_amount <= userCollateral[msg.sender], \\\"Market: amount too large\\\");\\n        _updatePrice();\\n\\n        userCollateral[msg.sender] = userCollateral[msg.sender] - _amount;\\n        totalCollateral = totalCollateral - _amount;\\n\\n        require(isUserSolvent(msg.sender), \\\"Market: exceeds Loan-to-Value\\\");\\n\\n        emit Withdraw(msg.sender, _to, _amount);\\n        collateralToken.safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Borrows `_amount` of debt tokens against msg.sender's collateral and sends them to the `_to` address\\n     * Requires that `msg.sender`s account is solvent and will request a price update from the oracle.\\n     * @param _to the reciever of the debt tokens\\n     * @param _amount the amount of debt to incur\\n     */\\n    function borrow(address _to, uint _amount) public override {\\n        _updatePrice();\\n\\n        uint borrowRateFee = _amount * borrowRate / BORROW_RATE_PRECISION;\\n        totalDebt = totalDebt + _amount + borrowRateFee;\\n        userDebt[msg.sender] = userDebt[msg.sender] + _amount + borrowRateFee;\\n\\n        require(isUserSolvent(msg.sender), \\\"Market: exceeds Loan-to-Value\\\");\\n\\n        feesCollected = feesCollected + borrowRateFee;\\n        emit Borrow(msg.sender, _to, _amount);\\n        debtToken.safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Repays `_amount` of the `_to` user's outstanding loan by transferring debt tokens from msg.sender\\n     * @param _to the user's account to repay\\n     * @param _amount the amount of tokens to repay\\n     */\\n    function repay(address _to, uint _amount) public override {\\n        require(_amount <= userDebt[_to], \\\"Market: repay exceeds debt\\\");\\n        totalDebt = totalDebt - _amount;\\n        userDebt[_to] = userDebt[_to] - _amount;\\n\\n        debtToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n         emit Repay(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Convienence function to deposit collateral and borrow debt tokens to the account of msg.sender\\n     * @param _depositAmount amount of collateral tokens to deposit\\n     * @param _borrowAmount amount of debt to incur\\n     */\\n    function depositAndBorrow(uint _depositAmount, uint _borrowAmount) external override {\\n        deposit(msg.sender, _depositAmount);\\n        borrow(msg.sender, _borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Convenience function to repay debt and withdraw collateral for the account of msg.sender\\n     * @param _repayAmount amount of debt to repay\\n     * @param _withdrawAmount amount of collateral to withdraw\\n     */\\n    function repayAndWithdraw(uint _repayAmount, uint _withdrawAmount) external override {\\n        repay(msg.sender, _repayAmount);\\n        withdraw(msg.sender, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Liquidate `_maxAmount` of a user's collateral who's loan-to-value ratio exceeds limit.\\n     * Debt tokens provided by `msg.sender` and liquidated collateral sent to `_to`.\\n     * Reverts if user is solvent.\\n     * @param _user the account to liquidate\\n     * @param _maxAmount the maximum amount of debt the liquidator is willing to repay\\n     * @param _to the address that will receive the liquidated collateral\\n     * @param _swapper an optional implementation of the IFlashSwap interface to exchange the collateral for debt\\n     */\\n    function liquidate(address _user, uint _maxAmount, address _to, IFlashSwap _swapper) external override {\\n        require(msg.sender != _user, \\\"Market: cannot liquidate self\\\");\\n\\n        uint price = _updatePrice();\\n\\n        require(!isUserSolvent(_user), \\\"Market: user solvent\\\");\\n\\n        uint userCollValue = (userCollateral[_user] * price) /  LAST_PRICE_PRECISION;\\n        uint discountedCollateralValue = (userCollValue * (LIQUIDATION_PENALTY_PRECISION - liquidationPenalty)) / LIQUIDATION_PENALTY_PRECISION;\\n        uint repayAmount = userDebt[_user] < _maxAmount ? userDebt[_user] : _maxAmount;\\n        uint liquidatedCollateral;\\n\\n        if (discountedCollateralValue < repayAmount) {\\n            // collateral is worth less than the proposed repayment amount\\n            // so buy it all\\n            liquidatedCollateral = userCollateral[_user];\\n            repayAmount = discountedCollateralValue;\\n        } else {\\n            // collateral is worth more than debt, liquidator purchases \\\"repayAmount\\\"\\n            liquidatedCollateral = (repayAmount * LAST_PRICE_PRECISION) / discountedCollateralValue;\\n        }\\n\\n        // bookkeeping\\n        userCollateral[_user] = userCollateral[_user] - liquidatedCollateral;\\n        totalCollateral = totalCollateral - liquidatedCollateral;\\n        userDebt[_user] = userDebt[_user] - repayAmount;\\n        totalDebt = totalDebt - repayAmount;\\n\\n        emit Repay(msg.sender, _user, repayAmount);\\n        emit Withdraw(_user, _to, liquidatedCollateral);\\n        emit Liquidate(_user, _to, repayAmount, liquidatedCollateral, price);\\n\\n        collateralToken.safeTransfer(_to, liquidatedCollateral);\\n        if (_swapper != IFlashSwap(address(0))) {\\n            _swapper.swap(collateralToken, debtToken, msg.sender, repayAmount, liquidatedCollateral);\\n        }\\n        debtToken.safeTransferFrom(msg.sender, address(this), repayAmount);\\n    }\\n\\n    /**\\n     * @notice Harvests fees collected to the treasury\\n     */\\n    function harvestFees() external {\\n        uint fees = feesCollected;\\n        feesCollected = 0;\\n        emit FeesHarvested(fees);\\n\\n        debtToken.safeTransfer(treasury, fees);\\n    }\\n\\n    /**\\n     * @notice updates the current price of the collateral and saves it in `lastPrice`.\\n     * @return the price\\n     */\\n    function updatePrice() external override returns (uint) {\\n        return _updatePrice();\\n    }\\n\\n    function _updatePrice() internal returns (uint) {\\n        (bool success, uint256 price) = oracle.fetchPrice();\\n        if (success) {\\n            lastPrice = price;\\n            emit LastPriceUpdated(price);\\n        }\\n        return lastPrice;\\n    }\\n\\n    /**\\n     * @notice reduces the available supply to be borrowed by transferring debt tokens to owner.\\n     * @param _amount number of tokens to remove\\n     */\\n    function reduceSupply(uint _amount) external onlyOwner {\\n        debtToken.safeTransfer(this.owner(), _amount);\\n    }\\n\\n    /**\\n     * @notice updates the treasury that receives the fees\\n     * @param _treasury address of the new treasury\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"Market: 0x0 treasury address\\\");\\n        treasury = _treasury;\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    /**\\n     * @notice updates the price oracle\\n     * @param _oracle the new oracle\\n     */\\n    function setOracle(address _oracle) external onlyOwner {\\n        require(_oracle != address(0), \\\"Market: 0x0 oracle address\\\");\\n        oracle = IOracle(_oracle);\\n        emit OracleUpdated(_oracle);\\n    }\\n\\n    /**\\n     * @notice recover tokens inadvertantly sent to this contract by transfering them to the owner\\n     * @param _token the address of the token\\n     * @param _amount the amount to transfer\\n     */\\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\\n        require(_token != address(debtToken), \\\"Cannot recover debt tokens\\\");\\n        require(_token != address(collateralToken), \\\"Cannot recover collateral tokens\\\");\\n\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    //////\\n    /// View Functions\\n    //////\\n    function getUserLTV(address _user) public view override returns (uint) {\\n        if (userDebt[_user] == 0) return 0;\\n        if (userCollateral[_user] == 0) return MAX_INT;\\n        return userDebt[_user] * LOAN_TO_VALUE_PRECISION / (userCollateral[_user] * lastPrice / LAST_PRICE_PRECISION);\\n    }\\n\\n    function isUserSolvent(address _user) public view override returns (bool) {\\n        return getUserLTV(_user) <= maxLoanToValue;\\n    }\\n}\",\"keccak256\":\"0xb876783f9d0580410a01d850b66ca65f3fdf9bc4170e7d774f375841026f10ff\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDebtToken is IERC20 {\\n    function mint(address _to, uint _amount) external;\\n    function burn(uint _amount) external;\\n}\",\"keccak256\":\"0x41be37887b1218ac0d76847dcfb238f8532773ff1e9826a9ad455ef071095f31\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFlashSwap {\\n    /**\\n     * @notice A callback for liquidations. The swap method will be called after the collateral tokens\\n     * have been transfered to the recipient. This function is then responsible for acquiring at least\\n     * _amountToMin of the debt tokens to pay for the liquidation. The debt tokens will then be transferFrom\\n     * the recipeient to the market contract, so it is required to approve the market contract for `_amountToMin`.\\n     * @param _collateralToken the collateral token\\n     * @param _debtToken the debt token\\n     * @param _recipient the address who should recieve the swapped debt tokens\\n     * @param _minRepayAmount the minimum amount of debt tokens needed for the transaction to be successful\\n     * @param _collateralAmount the number of collateral tokens that have just been transferred to recipient\\n     */\\n    function swap(\\n        IERC20 _collateralToken,\\n        IERC20 _debtToken,\\n        address _recipient,\\n        uint256 _minRepayAmount,\\n        uint256 _collateralAmount\\n    ) external;\\n}\",\"keccak256\":\"0x5ebda6686d5c43289a930d1f73b3d7d7e0435986b7d7d6248301454070ee1245\",\"license\":\"MIT\"},\"contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IFlashSwap } from \\\"./IFlashSwap.sol\\\";\\n\\ninterface IMarket {\\n    function deposit(address _to, uint _amount) external;\\n    function withdraw(address _to, uint _amount) external;\\n    function borrow(address _to, uint _amount) external;\\n    function repay(address _to, uint _amount) external;\\n\\n    function depositAndBorrow(uint _collateralAmount, uint _debtAmount) external;\\n    function repayAndWithdraw(uint _debtAmount, uint _collateralAmount) external;\\n\\n    function liquidate(address _user, uint _amount, address _to, IFlashSwap swapper) external;\\n    function updatePrice() external returns (uint);\\n\\n    function getUserLTV(address _user) external view returns(uint);\\n    function isUserSolvent(address _user) external view returns(bool);\\n}\\n\",\"keccak256\":\"0xf329e9191fee7f4f0a09e459e611a46bea4d507dac4400cacbaddf45be277cab\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function fetchPrice() external view returns (bool, uint);\\n}\",\"keccak256\":\"0xf3bc4b871ebb74641f91462364551170df871926ad43013db480e3857095c1a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630839cb331461006757806326e04f9d1461007c578063715018a6146100925780638da5cb5b1461009a578063b1283e77146100ba578063f2fde38b146100cd575b600080fd5b61007a6100753660046104a3565b6100e0565b005b6001546040519081526020015b60405180910390f35b61007a610269565b6100a26102a4565b6040516001600160a01b039091168152602001610089565b6100a26100c8366004610512565b6102b3565b61007a6100db366004610481565b6102dd565b336100e96102a4565b6001600160a01b0316146101185760405162461bcd60e51b815260040161010f9061052b565b60405180910390fd5b600254600090610130906001600160a01b031661037d565b9050806001600160a01b0316637403c6cd6101496102a4565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152818c166024820152818b166044820152818a166064820152908816608482015260a4810187905260c4810186905260e4810185905261010401600060405180830381600087803b1580156101c057600080fd5b505af11580156101d4573d6000803e3d6000fd5b505060018054808201825560008290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03861617905580547f26ced030b552a3d773aa10fcde5b2ffe14f6c18e773de0a51e9b27159c2efad0935061024e9250610560565b60405190815260200160405180910390a15050505050505050565b336102726102a4565b6001600160a01b0316146102985760405162461bcd60e51b815260040161010f9061052b565b6102a2600061041a565b565b6000546001600160a01b031690565b600181815481106102c357600080fd5b6000918252602090912001546001600160a01b0316905081565b336102e66102a4565b6001600160a01b03161461030c5760405162461bcd60e51b815260040161010f9061052b565b6001600160a01b0381166103715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161010f565b61037a8161041a565b50565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166104155760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640161010f565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461041557600080fd5b60006020828403121561049357600080fd5b61049c8261046a565b9392505050565b600080600080600080600060e0888a0312156104be57600080fd5b6104c78861046a565b96506104d56020890161046a565b95506104e36040890161046a565b94506104f16060890161046a565b9699959850939660808101359560a0820135955060c0909101359350915050565b60006020828403121561052457600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561058057634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220c461feea5407531cf9ea816e2db6a0bad5adca5f3b91594138eefdecb7f8dae264736f6c63430008060033",
  "devdoc": {
    "events": {
      "CreateMarket(uint256)": {
        "params": {
          "index": "Index of the current market in `markets` list."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_owner": "Owner of the factory and all markets"
        }
      },
      "createZeroInterestMarket(address,address,address,address,uint256,uint256,uint256)": {
        "params": {
          "_borrowRate": "Rate to calculate flat borrow fee",
          "_collateralToken": "ERC-20 to be deposited as collateral",
          "_debtToken": "ERC-20 to be withdrawn as debt",
          "_liquidationPenalty": "Rate to calculate liquidation penalty",
          "_maxLoanToValue": "Maximum ratio of debt to collateral",
          "_oracle": "Oracle from which to fetch updated collateral/debt token price",
          "_treasury": "the account that receives fees"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreateMarket(uint256)": {
        "notice": "New market created"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create new MarketFactory with an owner"
      },
      "createZeroInterestMarket(address,address,address,address,uint256,uint256,uint256)": {
        "notice": "Create new ZeroInterestMarket owned by this contract's owner"
      }
    },
    "notice": "Factory for Markets*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2073,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(IMarket)3297)dyn_storage"
      },
      {
        "astId": 2076,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "zeroInterestMarketImpl",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ZeroInterestMarket)3133"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IMarket)3297)dyn_storage": {
        "base": "t_contract(IMarket)3297",
        "encoding": "dynamic_array",
        "label": "contract IMarket[]",
        "numberOfBytes": "32"
      },
      "t_contract(IMarket)3297": {
        "encoding": "inplace",
        "label": "contract IMarket",
        "numberOfBytes": "20"
      },
      "t_contract(ZeroInterestMarket)3133": {
        "encoding": "inplace",
        "label": "contract ZeroInterestMarket",
        "numberOfBytes": "20"
      }
    }
  }
}